// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "../../shared/Utils.bs.js";
import * as React from "react";
import * as Peerjs from "peerjs";
import * as Throttle from "rescript-throttle/src/Throttle.bs.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Browser$ReScriptLogger from "rescript-logger/src/loggers/Browser.bs.js";

var initialLocalState = {
  localHostId: undefined,
  remoteHostId: undefined,
  localHostTime: 0.0
};

function localStateReducer(state, action) {
  if (typeof action === "number") {
    Browser$ReScriptLogger.debug({
          rootModule: "Hooks",
          subModulePath: /* [] */0,
          value: "localStateReducer",
          fullPath: "Hooks.localStateReducer"
        }, "Reset");
    return initialLocalState;
  }
  switch (action.TAG | 0) {
    case /* LocalHostTime */0 :
        var timestamp = action._0;
        Browser$ReScriptLogger.debug1({
              rootModule: "Hooks",
              subModulePath: /* [] */0,
              value: "localStateReducer",
              fullPath: "Hooks.localStateReducer"
            }, "LocalHostTime with payload", [
              "timestamp",
              timestamp
            ]);
        return {
                localHostId: state.localHostId,
                remoteHostId: state.remoteHostId,
                localHostTime: timestamp
              };
    case /* SetLocalHostId */1 :
        var id = action._0;
        Browser$ReScriptLogger.debug1({
              rootModule: "Hooks",
              subModulePath: /* [] */0,
              value: "localStateReducer",
              fullPath: "Hooks.localStateReducer"
            }, "SetLocalHostId with payload", [
              "id",
              id
            ]);
        return {
                localHostId: id,
                remoteHostId: state.remoteHostId,
                localHostTime: state.localHostTime
              };
    case /* SetRemoteHostId */2 :
        var id$1 = action._0;
        Browser$ReScriptLogger.debug1({
              rootModule: "Hooks",
              subModulePath: /* [] */0,
              value: "localStateReducer",
              fullPath: "Hooks.localStateReducer"
            }, "SetRemoteHostId with payload", [
              "id",
              id$1
            ]);
        return {
                localHostId: state.localHostId,
                remoteHostId: id$1,
                localHostTime: state.localHostTime
              };
    
  }
}

function useLocalState(param) {
  var match = React.useReducer(localStateReducer, initialLocalState);
  return [
          match[0],
          match[1]
        ];
}

function useVideo(param) {
  var match = React.useState(function () {
        return false;
      });
  var setHasVideoEl = match[1];
  React.useEffect((function () {
          var interval = {
            contents: null
          };
          var cancelInterval = function (param) {
            Js_null_undefined.iter(interval.contents, (function (intervalId) {
                    clearInterval(intervalId);
                  }));
          };
          var checkVideoEl = function (param) {
            var el = Utils.getVideoEl(undefined);
            if (el !== undefined) {
              if (Caml_option.valFromOption(el).duration > 60) {
                return Curry._1(setHasVideoEl, (function (param) {
                              return true;
                            }));
              } else {
                Browser$ReScriptLogger.debug({
                      rootModule: "Hooks",
                      subModulePath: /* [] */0,
                      value: "useVideo",
                      fullPath: "Hooks.useVideo"
                    }, "Video element probably an ad");
                return Curry._1(setHasVideoEl, (function (param) {
                              return false;
                            }));
              }
            } else {
              return Curry._1(setHasVideoEl, (function (param) {
                            return false;
                          }));
            }
          };
          interval.contents = setInterval(checkVideoEl, 500);
          return cancelInterval;
        }), []);
  return match[0];
}

function usePeer(remoteHostId) {
  var peer = React.useRef(new Peerjs.Peer(undefined, {
            debug: 2,
            secure: true
          }));
  var match = React.useState(function () {
        
      });
  var setLocalPeerId = match[1];
  var match$1 = React.useState(function () {
        return /* [] */0;
      });
  var setConnections = match$1[1];
  var connections = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setCurrentFilm = match$2[1];
  var handlePeerData = React.useCallback((function (data) {
          var v = Utils.getVideoEl(undefined);
          if (v !== undefined) {
            var el = Caml_option.valFromOption(v);
            Browser$ReScriptLogger.debug1({
                  rootModule: "Hooks",
                  subModulePath: /* [] */0,
                  value: "usePeer",
                  fullPath: "Hooks.usePeer"
                }, "Some with payload", [
                  "el",
                  el
                ]);
            switch (data.TAG | 0) {
              case /* Film */0 :
                  var film = data._0;
                  Browser$ReScriptLogger.debug1({
                        rootModule: "Hooks",
                        subModulePath: /* [] */0,
                        value: "usePeer",
                        fullPath: "Hooks.usePeer"
                      }, "Film with payload", [
                        "film",
                        film
                      ]);
                  return Curry._1(setCurrentFilm, (function (param) {
                                return film;
                              }));
              case /* Play */1 :
                  var timestamp = data._0;
                  Browser$ReScriptLogger.debug1({
                        rootModule: "Hooks",
                        subModulePath: /* [] */0,
                        value: "usePeer",
                        fullPath: "Hooks.usePeer"
                      }, "Play with payload", [
                        "timestamp",
                        timestamp
                      ]);
                  el.currentTime = timestamp;
                  el.play();
                  return ;
              case /* Pause */2 :
                  var timestamp$1 = data._0;
                  Browser$ReScriptLogger.debug1({
                        rootModule: "Hooks",
                        subModulePath: /* [] */0,
                        value: "usePeer",
                        fullPath: "Hooks.usePeer"
                      }, "Pause with payload", [
                        "timestamp",
                        timestamp$1
                      ]);
                  el.pause();
                  el.currentTime = timestamp$1;
                  return ;
              case /* TimeUpdate */3 :
                  Browser$ReScriptLogger.debug1({
                        rootModule: "Hooks",
                        subModulePath: /* [] */0,
                        value: "usePeer",
                        fullPath: "Hooks.usePeer"
                      }, "TimeUpdate with payload", [
                        "timestamp",
                        data._0
                      ]);
                  return ;
              
            }
          } else {
            Browser$ReScriptLogger.debug({
                  rootModule: "Hooks",
                  subModulePath: /* [] */0,
                  value: "usePeer",
                  fullPath: "Hooks.usePeer"
                }, "None");
            return Pervasives.failwith("Video element went missing");
          }
        }), []);
  var emitToPeers = React.useCallback((function (action) {
          switch (action.TAG | 0) {
            case /* Film */0 :
                var film = action._0;
                Browser$ReScriptLogger.debug1({
                      rootModule: "Hooks",
                      subModulePath: /* [] */0,
                      value: "usePeer",
                      fullPath: "Hooks.usePeer"
                    }, "Film with payload", [
                      "film",
                      film
                    ]);
                return Belt_List.forEach(connections, (function (connection) {
                              connection.send({
                                    TAG: /* Film */0,
                                    _0: film
                                  });
                            }));
            case /* Play */1 :
                var timestamp = action._0;
                Browser$ReScriptLogger.debug1({
                      rootModule: "Hooks",
                      subModulePath: /* [] */0,
                      value: "usePeer",
                      fullPath: "Hooks.usePeer"
                    }, "Play with payload", [
                      "timestamp",
                      timestamp
                    ]);
                return Belt_List.forEach(connections, (function (connection) {
                              connection.send({
                                    TAG: /* Play */1,
                                    _0: timestamp
                                  });
                            }));
            case /* Pause */2 :
                var timestamp$1 = action._0;
                Browser$ReScriptLogger.debug1({
                      rootModule: "Hooks",
                      subModulePath: /* [] */0,
                      value: "usePeer",
                      fullPath: "Hooks.usePeer"
                    }, "Pause with payload", [
                      "timestamp",
                      timestamp$1
                    ]);
                return Belt_List.forEach(connections, (function (connection) {
                              connection.send({
                                    TAG: /* Pause */2,
                                    _0: timestamp$1
                                  });
                            }));
            case /* TimeUpdate */3 :
                var timestamp$2 = action._0;
                Browser$ReScriptLogger.debug1({
                      rootModule: "Hooks",
                      subModulePath: /* [] */0,
                      value: "usePeer",
                      fullPath: "Hooks.usePeer"
                    }, "TimeUpdate with payload", [
                      "timestamp",
                      timestamp$2
                    ]);
                return Belt_List.forEach(connections, (function (connection) {
                              connection.send({
                                    TAG: /* TimeUpdate */3,
                                    _0: timestamp$2
                                  });
                            }));
            
          }
        }), [connections]);
  React.useEffect((function () {
          var el = Utils.getVideoEl(undefined);
          var videoEl = el !== undefined ? Caml_option.valFromOption(el) : Pervasives.failwith("Video element went missing");
          var handlePlay = function ($$event) {
            var currentTime = $$event.target.currentTime;
            Browser$ReScriptLogger.debug({
                  rootModule: "Hooks",
                  subModulePath: /* [] */0,
                  value: "usePeer",
                  fullPath: "Hooks.usePeer"
                }, "Play movie");
            Curry._1(emitToPeers, {
                  TAG: /* Play */1,
                  _0: currentTime
                });
          };
          var handlePause = function ($$event) {
            var currentTime = $$event.target.currentTime;
            Browser$ReScriptLogger.debug({
                  rootModule: "Hooks",
                  subModulePath: /* [] */0,
                  value: "usePeer",
                  fullPath: "Hooks.usePeer"
                }, "Pause movie");
            Curry._1(emitToPeers, {
                  TAG: /* Pause */2,
                  _0: currentTime
                });
          };
          var handleTimeUpdate = function ($$event) {
            var currentTime = $$event.target.currentTime;
            Browser$ReScriptLogger.debug({
                  rootModule: "Hooks",
                  subModulePath: /* [] */0,
                  value: "usePeer",
                  fullPath: "Hooks.usePeer"
                }, "Time update");
            Curry._1(emitToPeers, {
                  TAG: /* TimeUpdate */3,
                  _0: currentTime
                });
          };
          Throttle.make(2000, handleTimeUpdate);
          videoEl.addEventListener("play", handlePlay);
          videoEl.addEventListener("pause", handlePause);
          return (function (param) {
                    videoEl.removeEventListener("play", handlePlay);
                    videoEl.removeEventListener("pause", handlePause);
                  });
        }), [emitToPeers]);
  React.useEffect((function () {
          peer.current.on("open", (function (id) {
                  Browser$ReScriptLogger.debug1({
                        rootModule: "Hooks",
                        subModulePath: /* [] */0,
                        value: "usePeer",
                        fullPath: "Hooks.usePeer"
                      }, "My peer ID is: ", [
                        "id",
                        id
                      ]);
                  Curry._1(setLocalPeerId, (function (param) {
                          return id;
                        }));
                  peer.current.on("connection", (function (connection) {
                          connection.on("open", (function (param) {
                                  Browser$ReScriptLogger.debug({
                                        rootModule: "Hooks",
                                        subModulePath: /* [] */0,
                                        value: "usePeer",
                                        fullPath: "Hooks.usePeer"
                                      }, "Data connection open");
                                  connection.on("data", handlePeerData);
                                  Curry._1(setConnections, (function (prev) {
                                          return {
                                                  hd: connection,
                                                  tl: prev
                                                };
                                        }));
                                }));
                          connection.on("close", (function (param) {
                                  Browser$ReScriptLogger.debug({
                                        rootModule: "Hooks",
                                        subModulePath: /* [] */0,
                                        value: "usePeer",
                                        fullPath: "Hooks.usePeer"
                                      }, "data connection closed");
                                  Curry._1(setConnections, (function (prev) {
                                          return Belt_List.keep(prev, (function (item) {
                                                        return item.peer !== connection.peer;
                                                      }));
                                        }));
                                }));
                          connection.on("error", (function (error) {
                                  Browser$ReScriptLogger.error1({
                                        rootModule: "Hooks",
                                        subModulePath: /* [] */0,
                                        value: "usePeer",
                                        fullPath: "Hooks.usePeer"
                                      }, "data connection error", [
                                        "error",
                                        error
                                      ]);
                                }));
                        }));
                }));
        }), [handlePeerData]);
  React.useEffect((function () {
          if (remoteHostId !== undefined) {
            var peerConnection = peer.current.connect(remoteHostId, undefined);
            peerConnection.on("open", (function (param) {
                    Browser$ReScriptLogger.debug({
                          rootModule: "Hooks",
                          subModulePath: /* [] */0,
                          value: "usePeer",
                          fullPath: "Hooks.usePeer"
                        }, "data connection open");
                    Curry._1(setConnections, (function (prev) {
                            return {
                                    hd: peerConnection,
                                    tl: prev
                                  };
                          }));
                    peerConnection.on("data", handlePeerData);
                    peerConnection.on("close", (function (param) {
                            Browser$ReScriptLogger.debug({
                                  rootModule: "Hooks",
                                  subModulePath: /* [] */0,
                                  value: "usePeer",
                                  fullPath: "Hooks.usePeer"
                                }, "data connection closed");
                            Curry._1(setConnections, (function (prev) {
                                    return Belt_List.keep(prev, (function (item) {
                                                  return item.peer !== peerConnection.peer;
                                                }));
                                  }));
                          }));
                    peerConnection.on("error", (function (error) {
                            Browser$ReScriptLogger.error1({
                                  rootModule: "Hooks",
                                  subModulePath: /* [] */0,
                                  value: "usePeer",
                                  fullPath: "Hooks.usePeer"
                                }, "data connection error", [
                                  "error",
                                  error
                                ]);
                          }));
                  }));
          }
          
        }), [
        remoteHostId,
        handlePeerData
      ]);
  React.useEffect((function () {
          return (function (param) {
                    peer.current.destroy();
                    Curry._1(setConnections, (function (param) {
                            return /* [] */0;
                          }));
                  });
        }), []);
  return [
          peer.current,
          match[0],
          connections
        ];
}

export {
  initialLocalState ,
  localStateReducer ,
  useLocalState ,
  useVideo ,
  usePeer ,
}
/* Utils Not a pure module */
